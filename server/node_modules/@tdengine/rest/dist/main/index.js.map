{"mappings":"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","sources":["index.ts","src/connect.ts","src/cursor.ts","src/request.ts","src/result.ts"],"sourcesContent":["\nimport { TDConnect, Options } from './src/connect';\nlet options: Options = {\n    path: '/rest/sql/',\n    scheme: 'http',\n    user: 'root',\n    passwd: 'taosdata',\n    host: \"127.0.0.1\",\n}\nlet connect = function connect(option: Options) {\n    // console.log(\"index.options:\"+JSON.stringify(option));\n    return new TDConnect(option);\n}\n\nexport { options, connect }\n","import { TDengineCursor } from './cursor'\nimport { Uri, User } from './options'\n\n/**\n * Options used to connect with REST(taosAdapter)\n * Need to set options with 'host','path','port','user','passwd'.\n * connWith is optional attribute for further use.\n */\nexport interface Options extends Uri, User {\n    connWith?: 'rest' | 'taosc'\n}\n\n/**\n * Create connect with TDengine,actually pass options \n * to `Cursor` which send and receive HTTP request.\n */\nexport class TDConnect {\n\n    _connOption: Options;\n\n    constructor(connOption: Options) {\n        this._connOption = connOption\n    }\n\n    cursor(): TDengineCursor {\n        return new TDengineCursor(this._connOption);\n    }\n\n}\n","import { Uri, User } from './options'\nimport { TDResRequest } from './request'\nimport { Result } from './result'\n\n\nexport class TDengineCursor {\n    field: Array<any>;\n    data: Array<any>\n    _rowCount: number;\n    _uri: Uri;\n    _user: User;\n\n    constructor(options: any) {\n        this._uri = {\n            host: options.host,\n            path: options.path,\n            url: options.url,\n            port: options.port,\n            scheme: options.scheme,\n            query: options.query,\n            fragment: options.fragment,\n        }\n        this._user = {\n            user: options.user,\n            passwd: options.passwd,\n        }\n        this._rowCount = 0;\n        this.field = [];\n        this.data = [];\n\n    }\n\n    async query(sql: string, pure = true): Promise<Result> {\n        let req = new TDResRequest(this._uri, this._user);\n        let response = await req.request(sql);\n        if (response.status == 200) {\n            let res_json = await response.json();\n            if (pure == false) {\n                return new Result(res_json, sql);\n            } else {\n                return new Result(res_json);\n            }\n\n        } else if (response.status == 400) {\n            new Error(\"invalid parameters.\")\n        } else if (response.status == 401) {\n            throw new Error(\"Authentication failed.\")\n        } else if (response.status == 404) {\n            throw new Error(\"interface not exists.\")\n        } else if (response.status == 500) {\n            throw new Error(\"internal error.\")\n        } else if (response.status == 503) {\n            throw new Error(\"insufficient system resource.\")\n        }\n        throw new Error(\"http request failed.\");\n    }\n}","\nimport { Uri, User, FetchOptions } from \"./options\";\nimport fetch from 'node-fetch';\n\nexport class TDResRequest {\n    uri: Uri;\n    options: FetchOptions;\n    user: User;\n    queryParams = '';\n    hashFragment = '';\n\n    constructor(uri: Uri, user: User) {\n        this.uri = uri;\n        this.user = user;\n\n        // if uri.url exists,and that is a cloud url(means token exist)\n        if ((uri.query && uri.query['token']) || (uri.query && uri.query['token'])) {\n            this.options = {\n                method: 'POST',\n                body: '',\n                headers: {},\n            }\n        } else {\n            this.options = {\n                method: 'POST',\n                body: '',\n                headers: { 'Authorization': this._token() },\n            }\n        }\n    }\n\n    _makeUrl(): string {\n        let url = '';\n        if (this.uri.url) {\n            this._constructUrlWithInput();\n        } else {\n            //do nothing \n        }\n        if (this.uri.port) {\n            url = `${this.uri.scheme}://${this.uri.host}:${this.uri.port}${this.uri.path}`\n        } else {\n            url = `${this.uri.scheme}://${this.uri.host}${this.uri.path}`\n        }\n        if (this.uri.query) {\n            url += '?'\n            Object.keys(this.uri.query).forEach(\n                key => {\n                    if (this.uri.query && (this.uri.query[key] || this.uri.query[key])) {\n                        url += key + \"=\" + this.uri.query[key] + \"&\"\n                    }\n                }\n            )\n            // remove last \"&\"\n            url = url.slice(0, url.length - 1);\n            // console.log(\"query param:\"+url)\n        }\n        if (this.queryParams) {\n            url += this.queryParams;\n        }\n\n        if ((this.uri.fragment) || (this.uri.fragment)) {\n            if (this.uri.fragment.slice(0, 1) == '#') {\n                url += this.uri.fragment\n            } else {\n                url += '#' + this.uri.fragment;\n            }\n        }\n        if (this.hashFragment) {\n            url += this.hashFragment;\n        }\n\n        //console.log(`url:${url}`);\n        return url;\n    }\n    // if user input url\n    _constructUrlWithInput() {\n        if (this.uri.url) {\n            let urlObj = new URL(this.uri.url);\n            if (urlObj.protocol) {\n                this.uri.scheme = urlObj.protocol.slice(0, urlObj.protocol.length - 1);;\n            }\n            if (urlObj.hostname) {\n                this.uri.host = urlObj.hostname;\n            }\n            if (urlObj.port) {\n                this.uri.port = parseInt(urlObj.port);\n            }\n            if (urlObj.pathname != '/') {\n                this.uri.path = urlObj.pathname;\n            }\n            if (urlObj.search) {\n                this.queryParams = urlObj.search;\n            }\n            if (urlObj.hash) {\n                this.hashFragment = urlObj.hash;\n            }\n        }\n    }\n\n    _token(): string {\n        return `Basic ${Buffer.from(`${this.user.user}:${this.user.passwd}`).toString('base64')}`\n    }\n    _body(command: string): void {\n        this.options.body = command;\n    }\n\n    request(command: string): Promise<any> {\n        this._body(command);\n        //console.log(this._makeUrl());\n        return fetch(this._makeUrl(), this.options);\n    }\n}\n\n\n","interface IResult {\n    column_meta?: Array<Array<any>>;\n    data?: Array<Array<any>>;\n    rows?: number;\n    command?: string;\n    //for error \n    code?: number;\n    desc?: string;\n}\n\ninterface meta {\n    columnName: string;\n    typeName: string;\n    size: number;\n}\n\nexport class Result {\n    private _column_meta?: Array<meta>;\n    private _data?: Array<Array<any>>;\n    private _rows?: number;\n    private _command?: string;\n    //for error \n    private _code?: number;\n    private _desc?: string;\n\n    constructor(res: IResult, commands?: string) {\n        let meta_list_length = res.column_meta == undefined ? 0 : res.column_meta.length\n        if(res.code == 0){\n            this._code = res.code;\n            if(res.data&&res.column_meta&&res.column_meta[0][0] === \"affected_rows\"){\n                this._rows = res.data[0][0]\n            }else if(res.data){\n                this._rows = res.data.length;\n            }\n            this._column_meta = new Array(meta_list_length);\n            this._initMeta(res);\n            this._data = res.data;\n            this._command = commands;\n            this._desc = undefined;\n        }else {\n            this._column_meta = undefined;\n            this._data = undefined;\n            this._rows = undefined;\n            this._command = commands;\n            this._code = res.code;\n            this._desc = res.desc;\n        }\n\n    }\n    private _initMeta(res: IResult): void {\n        if (res.column_meta != undefined) {\n            res.column_meta.forEach((item, index) => {\n                if (this._column_meta != undefined)\n                    this._column_meta[index] = {\n                        columnName: item[0],\n                        typeName: item[1],\n                        size: item[2],              \n                    }\n            })\n        }\n    }\n    private _initData(resData:Array<Array<any>>,meta:Array<Array<any>>,rows:number):void{\n        if (resData.length = 0){\n            this._data=[[]];\n        } else {\n            this._data= new Array<Array<any>>(resData.length);\n            for (let i =0 ;i<rows;i++){\n                for (let j=0;j<meta.length;j++){\n                    if(meta[j][1] ==9 ){\n                        this._data[i][j] = new Date(resData[i][j])\n                    }else{\n                        this._data[i][j] = resData[i][j]\n                    }\n                }\n            }\n        }\n    }\n\n    getResult(): Result {\n        return this;\n    }\n\n    getMeta(): Array<meta> | undefined {\n        return this._column_meta;\n    }\n\n    getData(): Array<Array<any>> | undefined {\n        return this._data;\n    }\n\n    getAffectRows(): number | undefined {\n        return this._rows;\n    }\n\n    getCommand(): string | undefined {\n        return this._command;\n    }\n\n    getErrCode(): number | undefined {\n        return this._code;\n    }\n\n    getErrStr(): string | undefined {\n        return this._desc;\n    }\n\n    private _prettyStr(fields: Array<meta>, data: Array<Array<any>>): string {\n        let colName = new Array<string>();\n        let colType = new Array<string | undefined>();\n        let colSize = new Array<number>();\n        let colStr = '';\n\n        for (let i = 0; i < fields.length; i++) {\n            colName.push(fields[i].columnName)\n            colType.push(fields[i].typeName);\n\n            if ((fields[i].typeName) === \"VARCHAR\" || (fields[i].typeName) === \"NCHAR\") {\n                colSize.push(Math.max(fields[i].columnName.length, fields[i].size));  //max(column_name.length,column_type_precision)\n            } else {\n                colSize.push(Math.max(fields[i].columnName.length, suggestedMinWidths[fields[i].size]));// max(column_name.length,suggest_column_with_suggestion)\n            }\n            // console.log(colSize)\n        }\n        colName.forEach((name, i) => {\n            colStr += this._fillEmpty(Math.floor(colSize[i] / 2 - name.length / 2)) + name.toString() + this._fillEmpty(Math.ceil(colSize[i] / 2 - name.length / 2)) + \" | \"\n        })\n\n        let strSperator = \"\"\n        let sizeSum = colSize.reduce((a, b) => a += b, (0)) + colSize.length * 3\n        strSperator = this._printN(\"=\", sizeSum)\n\n        console.log(\"\\n\" + colStr)\n        console.log(strSperator)\n\n        data.forEach((row) => {\n            let rowStr = \"\"\n            row.forEach((cell, index) => {\n                rowStr += cell == null ? 'null' : cell.toString();\n                rowStr += this._fillEmpty(colSize[index] - cell.toString().length) + \" | \"\n            })\n            console.log(rowStr)\n        })\n\n        return colStr\n    }\n\n    private _fillEmpty(n:number) {\n        let str = \"\";\n        for (let i = 0; i < n; i++) {\n            str += \" \";\n        }\n        return str;\n    }\n\n    private _printN(s:string, n:number) {\n        let f = \"\";\n        for (let i = 0; i < n; i++) {\n            f += s;\n        }\n        return f;\n    }\n}\n\n\n\ninterface indexableString {\n    [index: number]: string\n}\n/**\n * this file record TDengine's data type and code.\n */\nconst typeNameMap: indexableString = {\n    0: 'null',\n    1: 'bool',\n    2: 'tinyint',\n    3: 'smallint',\n    4: 'int',\n    5: 'bigint',\n    6: 'float',\n    7: 'double',\n    8: 'binary',\n    9: 'timestamp',\n    10: 'nchar',\n    11: 'unsigned tinyint',\n    12: 'unsigned smallint',\n    13: 'unsigned int',\n    14: 'unsigned bigint',\n    15: 'json'\n}\n\ninterface indexableNumber {\n    [index: number]: number\n}\nconst suggestedMinWidths: indexableNumber = {\n    0: 4,\n    1: 4,\n    2: 4,\n    3: 6,\n    4: 11,\n    5: 12,\n    6: 24,\n    7: 24,\n    8: 10,\n    9: 25,\n    10: 10,\n}\n\n\n"],"names":[],"version":3,"file":"index.js.map"}