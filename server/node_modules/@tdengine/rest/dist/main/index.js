var $02VCc$nodefetch = require("node-fetch");
var $02VCc$buffer = require("buffer");

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "options", () => $80bd448eb6ea085b$export$41c562ebe57d11e2);
$parcel$export(module.exports, "connect", () => $80bd448eb6ea085b$export$64605811ab45167f);


var $b316306660403ad7$require$Buffer = $02VCc$buffer.Buffer;
class $b316306660403ad7$export$b0afa329482d05c2 {
    queryParams = '';
    hashFragment = '';
    constructor(uri, user){
        this.uri = uri;
        this.user = user;
        // if uri.url exists,and that is a cloud url(means token exist)
        if (uri.query && uri.query['token'] || uri.query && uri.query['token']) this.options = {
            method: 'POST',
            body: '',
            headers: {}
        };
        else this.options = {
            method: 'POST',
            body: '',
            headers: {
                'Authorization': this._token()
            }
        };
    }
    _makeUrl() {
        let url = '';
        if (this.uri.url) this._constructUrlWithInput();
        if (this.uri.port) url = `${this.uri.scheme}://${this.uri.host}:${this.uri.port}${this.uri.path}`;
        else url = `${this.uri.scheme}://${this.uri.host}${this.uri.path}`;
        if (this.uri.query) {
            url += '?';
            Object.keys(this.uri.query).forEach((key)=>{
                if (this.uri.query && (this.uri.query[key] || this.uri.query[key])) url += key + "=" + this.uri.query[key] + "&";
            });
            // remove last "&"
            url = url.slice(0, url.length - 1);
        // console.log("query param:"+url)
        }
        if (this.queryParams) url += this.queryParams;
        if (this.uri.fragment || this.uri.fragment) {
            if (this.uri.fragment.slice(0, 1) == '#') url += this.uri.fragment;
            else url += '#' + this.uri.fragment;
        }
        if (this.hashFragment) url += this.hashFragment;
        //console.log(`url:${url}`);
        return url;
    }
    // if user input url
    _constructUrlWithInput() {
        if (this.uri.url) {
            let urlObj = new URL(this.uri.url);
            if (urlObj.protocol) this.uri.scheme = urlObj.protocol.slice(0, urlObj.protocol.length - 1);
            if (urlObj.hostname) this.uri.host = urlObj.hostname;
            if (urlObj.port) this.uri.port = parseInt(urlObj.port);
            if (urlObj.pathname != '/') this.uri.path = urlObj.pathname;
            if (urlObj.search) this.queryParams = urlObj.search;
            if (urlObj.hash) this.hashFragment = urlObj.hash;
        }
    }
    _token() {
        return `Basic ${$b316306660403ad7$require$Buffer.from(`${this.user.user}:${this.user.passwd}`).toString('base64')}`;
    }
    _body(command) {
        this.options.body = command;
    }
    request(command) {
        this._body(command);
        //console.log(this._makeUrl());
        return ($parcel$interopDefault($02VCc$nodefetch))(this._makeUrl(), this.options);
    }
}


class $045f9acb7015cc32$export$8fdcabde73f49165 {
    constructor(res, commands){
        let meta_list_length = res.column_meta == undefined ? 0 : res.column_meta.length;
        if (res.code == 0) {
            this._code = res.code;
            if (res.data && res.column_meta && res.column_meta[0][0] === "affected_rows") this._rows = res.data[0][0];
            else if (res.data) this._rows = res.data.length;
            this._column_meta = new Array(meta_list_length);
            this._initMeta(res);
            this._data = res.data;
            this._command = commands;
            this._desc = undefined;
        } else {
            this._column_meta = undefined;
            this._data = undefined;
            this._rows = undefined;
            this._command = commands;
            this._code = res.code;
            this._desc = res.desc;
        }
    }
    _initMeta(res) {
        if (res.column_meta != undefined) res.column_meta.forEach((item, index)=>{
            if (this._column_meta != undefined) this._column_meta[index] = {
                columnName: item[0],
                typeName: item[1],
                size: item[2]
            };
        });
    }
    _initData(resData, meta, rows) {
        resData.length = 0;
        this._data = new Array(resData.length);
        for(let i = 0; i < rows; i++){
            for(let j = 0; j < meta.length; j++)if (meta[j][1] == 9) this._data[i][j] = new Date(resData[i][j]);
            else this._data[i][j] = resData[i][j];
        }
    }
    getResult() {
        return this;
    }
    getMeta() {
        return this._column_meta;
    }
    getData() {
        return this._data;
    }
    getAffectRows() {
        return this._rows;
    }
    getCommand() {
        return this._command;
    }
    getErrCode() {
        return this._code;
    }
    getErrStr() {
        return this._desc;
    }
    _prettyStr(fields, data) {
        let colName = new Array();
        let colType = new Array();
        let colSize = new Array();
        let colStr = '';
        for(let i1 = 0; i1 < fields.length; i1++){
            colName.push(fields[i1].columnName);
            colType.push(fields[i1].typeName);
            if (fields[i1].typeName === "VARCHAR" || fields[i1].typeName === "NCHAR") colSize.push(Math.max(fields[i1].columnName.length, fields[i1].size)); //max(column_name.length,column_type_precision)
            else colSize.push(Math.max(fields[i1].columnName.length, $045f9acb7015cc32$var$suggestedMinWidths[fields[i1].size])); // max(column_name.length,suggest_column_with_suggestion)
        // console.log(colSize)
        }
        colName.forEach((name, i)=>{
            colStr += this._fillEmpty(Math.floor(colSize[i] / 2 - name.length / 2)) + name.toString() + this._fillEmpty(Math.ceil(colSize[i] / 2 - name.length / 2)) + " | ";
        });
        let strSperator = "";
        let sizeSum = colSize.reduce((a, b)=>a += b
        , 0) + colSize.length * 3;
        strSperator = this._printN("=", sizeSum);
        console.log("\n" + colStr);
        console.log(strSperator);
        data.forEach((row)=>{
            let rowStr = "";
            row.forEach((cell, index)=>{
                rowStr += cell == null ? 'null' : cell.toString();
                rowStr += this._fillEmpty(colSize[index] - cell.toString().length) + " | ";
            });
            console.log(rowStr);
        });
        return colStr;
    }
    _fillEmpty(n) {
        let str = "";
        for(let i = 0; i < n; i++)str += " ";
        return str;
    }
    _printN(s, n) {
        let f = "";
        for(let i = 0; i < n; i++)f += s;
        return f;
    }
}
/**
 * this file record TDengine's data type and code.
 */ const $045f9acb7015cc32$var$typeNameMap = {
    0: 'null',
    1: 'bool',
    2: 'tinyint',
    3: 'smallint',
    4: 'int',
    5: 'bigint',
    6: 'float',
    7: 'double',
    8: 'binary',
    9: 'timestamp',
    10: 'nchar',
    11: 'unsigned tinyint',
    12: 'unsigned smallint',
    13: 'unsigned int',
    14: 'unsigned bigint',
    15: 'json'
};
const $045f9acb7015cc32$var$suggestedMinWidths = {
    0: 4,
    1: 4,
    2: 4,
    3: 6,
    4: 11,
    5: 12,
    6: 24,
    7: 24,
    8: 10,
    9: 25,
    10: 10
};


class $92a998f8ef057e9f$export$d86352e83c3b0e60 {
    constructor(options){
        this._uri = {
            host: options.host,
            path: options.path,
            url: options.url,
            port: options.port,
            scheme: options.scheme,
            query: options.query,
            fragment: options.fragment
        };
        this._user = {
            user: options.user,
            passwd: options.passwd
        };
        this._rowCount = 0;
        this.field = [];
        this.data = [];
    }
    async query(sql, pure = true) {
        let req = new $b316306660403ad7$export$b0afa329482d05c2(this._uri, this._user);
        let response = await req.request(sql);
        if (response.status == 200) {
            let res_json = await response.json();
            if (pure == false) return new $045f9acb7015cc32$export$8fdcabde73f49165(res_json, sql);
            else return new $045f9acb7015cc32$export$8fdcabde73f49165(res_json);
        } else if (response.status == 400) new Error("invalid parameters.");
        else if (response.status == 401) throw new Error("Authentication failed.");
        else if (response.status == 404) throw new Error("interface not exists.");
        else if (response.status == 500) throw new Error("internal error.");
        else if (response.status == 503) throw new Error("insufficient system resource.");
        throw new Error("http request failed.");
    }
}


class $da8e7dc0da7bb92c$export$3701362c0f56cd7b {
    constructor(connOption){
        this._connOption = connOption;
    }
    cursor() {
        return new $92a998f8ef057e9f$export$d86352e83c3b0e60(this._connOption);
    }
}


let $80bd448eb6ea085b$export$41c562ebe57d11e2 = {
    path: '/rest/sql/',
    scheme: 'http',
    user: 'root',
    passwd: 'taosdata',
    host: "127.0.0.1"
};
let $80bd448eb6ea085b$export$64605811ab45167f = function $80bd448eb6ea085b$export$64605811ab45167f(option) {
    // console.log("index.options:"+JSON.stringify(option));
    return new $da8e7dc0da7bb92c$export$3701362c0f56cd7b(option);
};


//# sourceMappingURL=index.js.map
